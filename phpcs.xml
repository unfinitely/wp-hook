<?xml version="1.0"?>
<ruleset name="WordPress Plugin Coding Standards">
	<description>An opiniated coding standards for a WordPress plugin</description>

	<!-- Check all PHP files in directory tree by default. -->
	<arg name="extensions" value="php"/>

	<file>./src</file>
	<file>./tests</file>

	<!-- Show progress and sniff codes in all reports. -->
	<arg value="ps"/>

	<!-- Show the warning but exit with 0. The Warning is fine. -->
	<config name="ignore_warnings_on_exit" value="1"/>

	<!-- Check for cross-version support for PHP 7.2 or higher. Requires PHPCompatibility. -->
	<config name="testVersion" value="7.2-"/>

	<!--
		Set minimium WordPress version to support.

		@link https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties#minimum-wp-version-to-check-for-usage-of-deprecated-functions-classes-and-function-parameters
	-->
	<config name="minimum_supported_wp_version" value="5.5"/>

	<!-- PSR-12: Extended Coding Style -->
	<rule ref="PSR12">
		<!-- Spacing around the brakets make the codes more convenient to read -->
		<exclude name="PSR12.Classes.AnonClassDeclaration.SpaceAfterKeyword"/>
		<exclude name="PSR12.Classes.AnonClassDeclaration.SpaceAfterOpenBracket"/>
		<exclude name="PSR12.Classes.AnonClassDeclaration.SpaceBeforeCloseBracket"/>
		<exclude name="PSR12.ControlStructures.ControlStructureSpacing.SpaceBeforeCloseBrace"/>
		<exclude name="PSR12.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace"/>
		<exclude name="PSR12.ControlStructures.ControlStructureSpacing.SpacingBeforeOpenBrace"/>
		<exclude name="PSR2.Methods.FunctionCallSignature.SpaceAfterOpenBracket"/>
		<exclude name="PSR2.Methods.FunctionCallSignature.SpaceBeforeCloseBracket"/>
		<exclude name="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen"/>

		<!-- Replaced by SlevomatCodingStandard.Files.LineLength as it allows a more granular configuration -->
		<exclude name="Generic.Files.LineLength"/>

		<!--  -->
		<exclude name="Generic.WhiteSpace.DisallowTabIndent.TabsUsed"/>
	</rule>

	<!-- File rules -->
	<rule ref="Generic.Files.ExecutableFile"/>

	<!-- Use the short array syntax, `[]`, to declare an array instead -->
	<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

	<!-- Naming conventions. -->
	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>
	<!-- All calls to builtin PHP functions are lowercase -->
	<rule ref="Squiz.NamingConventions.ValidVariableName"/>
	<!-- Variable names should be camelCased -->
	<rule ref="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore">
		<!-- But we DO NOT want leading underscores for private vars e.g. $_foo -->
		<severity>0</severity>
	</rule>

	<!-- Disallow Yoda conditions. -->
	<rule ref="Generic.ControlStructures.DisallowYodaConditions"/>

	<!-- Non-controversial generally-agreed upon WordPress Coding Standards -->
	<rule ref="WordPress-Core">
		<exclude name="Generic.Arrays.DisallowShortArraySyntax.Found"/>

		<!-- Opening braces should be on a new line following PSR-12 -->
		<exclude name="Generic.Classes.OpeningBraceSameLine.BraceOnNewLine"/>
		<exclude name="Generic.Functions.OpeningFunctionBraceKernighanRitchie.BraceOnNewLine"/>

		<!-- Use spaces instead of indent as per PSR-12 -->
		<exclude name="Generic.WhiteSpace.DisallowSpaceIndent.SpacesUsed"/>

		<!--
		Allow "\n" after closing parenthesis as we are enforcing opening bracket after
		the close parenthesis on a new line with PSR12, for example:
		function foo()
		{
		}
      	-->
		<exclude name="WordPress.WhiteSpace.ControlStructureSpacing.ExtraSpaceAfterCloseParenthesis"/>

		<!-- Sometimes it's better to use the PHP native function for example `json_encode`. -->
		<exclude name="WordPress.WP.AlternativeFunctions"/>

		<!-- Disable the alignment rules. -->
		<exclude name="WordPress.Arrays.MultipleStatementAlignment"/>
		<exclude name="Generic.Formatting.MultipleStatementAlignment"/>

		<!-- Disable the WordPress file naming convention -->
		<exclude name="WordPress.Files.FileName"/>

		<!--
        The name for functions, methods, variables, and properties should now be camelCased
        instead of snake_cased
        -->
		<exclude name="WordPress.NamingConventions.ValidFunctionName.MethodNameInvalid"/>
		<exclude name="WordPress.NamingConventions.ValidVariableName.InterpolatedVariableNotSnakeCase"/>
		<exclude name="WordPress.NamingConventions.ValidVariableName.PropertyNotSnakeCase"/>
		<exclude name="WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase"/>
		<exclude name="WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase"/>

		<!-- Ensure that the Yoda condition is disabled. -->
		<exclude name="WordPress.PHP.YodaConditions"/>

		<!-- Allows the use of some discouraged functions. -->
		<exclude name="WordPress.PHP.DiscouragedPHPFunctions.serialize_serialize"/>
		<exclude name="WordPress.PHP.DiscouragedPHPFunctions.serialize_unserialize"/>
		<exclude name="WordPress.PHP.DiscouragedPHPFunctions.system_calls_system"/>

		<!-- These rules already covered by PSR12 -->
		<exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments"/>
		<exclude name="PEAR.Functions.FunctionCallSignature.Indent"/>
		<exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine"/>
		<exclude name="WordPress.WhiteSpace.ControlStructureSpacing.SpaceBeforeFunctionOpenParenthesis"/>
		<exclude name="WordPress.WhiteSpace.OperatorSpacing"/>
	</rule>

	<!-- Sometimes we need to override globals -->
	<rule ref="WordPress.WP.GlobalVariablesOverride.OverrideProhibited">
		<type>warning</type>
	</rule>

	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array">
				<element value="wp-good-password"/>
			</property>
		</properties>
	</rule>

	<rule ref="WordPress.Security.NonceVerification.Recommended">
		<!-- Make an exception for this rule in the tests files. -->
		<exclude-pattern>./tests</exclude-pattern>
	</rule>

	<!-- WordPress Coding Standards for Inline Documentation and Comments -->
	<rule ref="WordPress-Docs">
		<!--
      This rule is replaced by SlevomatCodingStandard.Commenting.DocCommentSpacing
      which provide a more granular configuration.
      -->
		<exclude name="Generic.Commenting.DocComment.SpacingBeforeTags"/>

		<!-- File comment should be optional -->
		<exclude name="Squiz.Commenting.FileComment.Missing"/>

		<!-- File comment should not require @package tag as it can be replaced with namespacing -->
		<exclude name="Squiz.Commenting.FileComment.MissingPackageTag"/>

		<!-- Replaced with PSR12 which requires one blank space after the PHP open tag -->
		<exclude name="Squiz.Commenting.FileComment.SpacingAfterOpen"/>

		<!--
			The @param tag should be optional. Most @param tags can now be replaced with TypeHints
			which is standardised with the SlevomatCodingStandard.TypeHints rules
			-->
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/>
		<exclude name="Squiz.Commenting.VariableComment.MissingVar"/>

		<!--
			Spacing after param type is not required, as the it can look weird when
			used in between lengthy parameter type.
			-->
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
	</rule>

	<rule ref="WordPress-Extra">
		<!-- This rule is already covered by PSR12 -->
		<exclude name="WordPress.Classes.ClassInstantiation.MissingParenthesis"/>
	</rule>

	<!-- Checks that class/trait/interface members are in the correct order. -->
	<rule ref="SlevomatCodingStandard.Classes.ClassStructure">
		<properties>
			<property name="groups" type="array">

				<!-- Traits -->
				<element value="uses"/>

				<!-- Constants -->
				<element value="private constants"/>
				<element value="protected constants"/>
				<element value="public constants"/>

				<!-- Props -->
				<element value="private properties"/>
				<element value="private static properties"/>
				<element value="protected properties"/>
				<element value="protected static properties"/>
				<element value="public properties"/>
				<element value="public static properties"/>

				<!-- Constructors -->
				<element value="constructor, static constructors"/>

				<!-- Public Methods -->
				<element value="public abstract methods"/>
				<element value="public methods"/>
				<element value="public static abstract methods"/>
				<element value="public static methods"/>

				<!-- Protected Methods -->
				<element value="protected abstract methods"/>
				<element value="protected methods"/>
				<element value="protected static abstract methods"/>
				<element value="protected static methods"/>

				<!-- Private Methods -->
				<element value="private methods"/>
				<element value="private static methods"/>

				<!-- Misc. -->
				<element value="magic methods"/>
				<element value="destructor"/>
			</property>
		</properties>
	</rule>

	<!-- SlevomatCodingStandard: Functional -->
	<rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>
	<rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
	<rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>
	<rule ref="SlevomatCodingStandard.Functions.StaticClosure"/>
	<rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
	<rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
		<exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification"/>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
		<exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification"/>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>

	<!-- SlevomatCodingStandard: Cleaning -->
	<rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements"/>
	<rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
	<rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
	<rule ref="SlevomatCodingStandard.Namespaces.UnusedUses"/>
	<rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
	<rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>
	<rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking"/>
	<rule ref="SlevomatCodingStandard.PHP.RequireExplicitAssertion"/>
	<rule ref="SlevomatCodingStandard.PHP.RequireNowdoc"/>
	<rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>
	<rule ref="SlevomatCodingStandard.Variables.UnusedVariable"/>
	<rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>

	<!-- SlevomatCodingStandard: Formatting -->
	<rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
	<rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
		<properties>
			<property name="annotationsGroups" type="array">
				<element value="@example"/>
				<element value="@link, @see"/>
				<element value="@todo, @phpcsSuppress"/>
				<!--
          Tests annotation
          @link https://phpunit.readthedocs.io/en/7.0/annotations.html
          The @author annotation is excluded from the list, use @group or @ticket instead.
          -->
				<element value="
          @after,
          @afterClass,
          @backupGlobals,
          @backupStaticAttributes,
          @before,
          @beforeClass,
          @codeCoverageIgnore*,
          @covers,
          @coversDefaultClass,
          @coversNothing,
          @dataProvider,
          @depends,
          @doesNotPerformAssertions,
          @group,
          @large,
          @medium,
          @preserveGlobalState,
          @requires,
          @runTestsInSeparateProcesses,
          @runInSeparateProcess,
          @small,
          @test,
          @testdox,
          @testWith,
          @ticket,
          @uses" />
				<element value="@param, @throws, @return"/>
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
	<rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
		<properties>
			<property name="forbiddenAnnotations" type="array">
				<element value="@package"/>
				<element value="@copyright"/>
				<element value="@license"/>
				<element value="@author"/>
				<element value="@version"/>
				<element value="@since"/>
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment"/>
	<rule ref="SlevomatCodingStandard.Commenting.UselessFunctionDocComment"/>
	<rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing">
		<properties>
			<property name="linesCountAfterControlStructure" value="1" />
			<property name="linesCountAfterLastControlStructure" value="0" />
			<property name="linesCountBeforeControlStructure" value="1" />
			<property name="linesCountBeforeFirstControlStructure" value="1" />
			<!-- Remove 'case' & 'default' from the list -->
			<property name="tokensToCheck" type="array">
				<element value="T_IF"/>
				<element value="T_DO"/>
				<element value="T_WHILE"/>
				<element value="T_FOR"/>
				<element value="T_FOREACH"/>
				<element value="T_SWITCH"/>
				<element value="T_TRY"/>
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowShortTernaryOperator"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator"/>
	<rule ref="SlevomatCodingStandard.Files.LineLength">
		<properties>
			<property name="lineLengthLimit" value="240"/>
			<property name="ignoreComments" value="true"/>
			<property name="ignoreImports" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Files.TypeNameMatchesFileName">
		<properties>
			<property name="rootNamespaces" type="array">
				<element key="src" value="Stringth\WPHook"/>
				<element key="tests" value="Stringth\WPHook\Tests"/>
			</property>
			<property name="skipDirs" type="array">
				<element value="bootstrap"/>
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
	<rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
	<rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation"/>
	<rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
	<rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>
	<rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
		<properties>
			<!-- Function reference -->
			<property name="allowFallbackGlobalFunctions" value="false"/>
			<property name="allowFullyQualifiedGlobalFunctions" value="false"/>
			<property name="allowFullyQualifiedNameForCollidingFunctions" value="true"/>

			<!-- Constant reference -->
			<property name="allowFallbackGlobalConstants" value="false"/>
			<property name="allowFullyQualifiedGlobalConstants" value="false"/>
			<property name="allowFullyQualifiedNameForCollidingConstants" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.PHP.TypeCast"/>
	<rule ref="SlevomatCodingStandard.PHP.ShortList"/>
	<rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
		<exclude name="SlevomatCodingStandard.TypeHints.DeclareStrictTypes.IncorrectWhitespaceBetweenOpenTagAndDeclare"/>
		<include-pattern>/src/</include-pattern>
		<properties>
			<property name="linesCountAfterDeclare" value="1"/>
			<property name="linesCountBeforeDeclare" value="1"/>
			<property name="spacesCountAroundEqualsSign" value="0"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax"/>
	<rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
	<rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
	<rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>
	<rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces"/>

	<!-- Run against the PHPCompatibility ruleset -->
	<rule ref="PHPCompatibility"/>

	<exclude-pattern>./tests/bootstrap.php</exclude-pattern>
	<exclude-pattern>./tests/intelephense-alias.php</exclude-pattern>
	<exclude-pattern>**/tmp/**</exclude-pattern>
	<exclude-pattern>**/vendor/**</exclude-pattern>
</ruleset>
